name: Deploy to Cloud Run (Fixed)

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PROJECT_ID: water-futures-ai
  REGION: us-central1
  GAR_LOCATION: us-central1

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        version: 'latest'
    
    - name: Configure Docker for Artifact Registry
      run: |
        gcloud auth configure-docker ${GAR_LOCATION}-docker.pkg.dev
    
    - name: Build and Push Backend
      working-directory: ./backend
      run: |
        docker build -t ${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/water-futures/backend:${{ github.sha }} .
        docker push ${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/water-futures/backend:${{ github.sha }}
    
    - name: Deploy Backend to Cloud Run
      run: |
        gcloud run deploy water-futures-backend \
          --image ${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/water-futures/backend:${{ github.sha }} \
          --region ${REGION} \
          --platform managed \
          --allow-unauthenticated \
          --set-env-vars "\
            ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }},\
            ALPACA_API_KEY=${{ secrets.ALPACA_API_KEY }},\
            ALPACA_SECRET_KEY=${{ secrets.ALPACA_SECRET_KEY }},\
            CROSSMINT_API_KEY=${{ secrets.CROSSMINT_API_KEY }},\
            UNCLE_SAM_WALLET_ADDRESS=${{ secrets.UNCLE_SAM_WALLET_ADDRESS }}" \
          --memory 2Gi \
          --cpu 2 \
          --max-instances 10 \
          --min-instances 0 \
          --port 8080
    
    - name: Build and Push MCP Servers
      working-directory: ./mcp-servers
      run: |
        # Generate package-lock.json if it doesn't exist
        if [ ! -f package-lock.json ]; then
          npm install --package-lock-only
        fi
        
        docker build -t ${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/water-futures/mcp:${{ github.sha }} .
        docker push ${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/water-futures/mcp:${{ github.sha }}
    
    - name: Get Backend URL
      id: backend-url
      run: |
        BACKEND_URL=$(gcloud run services describe water-futures-backend \
          --region ${REGION} \
          --format 'value(status.url)')
        echo "url=$BACKEND_URL" >> $GITHUB_OUTPUT
    
    - name: Deploy MCP Servers to Cloud Run
      run: |
        gcloud run deploy water-futures-mcp \
          --image ${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/water-futures/mcp:${{ github.sha }} \
          --region ${REGION} \
          --platform managed \
          --allow-unauthenticated \
          --set-env-vars "\
            ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }},\
            ALPACA_API_KEY=${{ secrets.ALPACA_API_KEY }},\
            ALPACA_SECRET_KEY=${{ secrets.ALPACA_SECRET_KEY }},\
            CROSSMINT_API_KEY=${{ secrets.CROSSMINT_API_KEY }},\
            BACKEND_URL=${{ steps.backend-url.outputs.url }}" \
          --memory 1Gi \
          --cpu 1 \
          --max-instances 10 \
          --min-instances 0 \
          --port 8080
    
    - name: Output Service URLs
      run: |
        echo "## ðŸš€ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Service URLs:" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend**: $(gcloud run services describe water-futures-backend --region ${REGION} --format 'value(status.url)')" >> $GITHUB_STEP_SUMMARY
        echo "- **MCP Server**: $(gcloud run services describe water-futures-mcp --region ${REGION} --format 'value(status.url)')" >> $GITHUB_STEP_SUMMARY