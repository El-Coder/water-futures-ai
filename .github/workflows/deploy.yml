name: Deploy to Cloud Run

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PROJECT_ID: water-futures-ai
  REGION: us-central1

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
    
    - name: Setup Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Configure Docker
      run: |
        gcloud auth configure-docker gcr.io
    
    # Deploy Backend Service
    - name: Build and Push Backend
      run: |
        docker build -t gcr.io/${{ env.PROJECT_ID }}/water-futures-backend ./backend
        docker push gcr.io/${{ env.PROJECT_ID }}/water-futures-backend
    
    - name: Deploy Backend to Cloud Run
      run: |
        gcloud run deploy water-futures-backend \
          --image gcr.io/${{ env.PROJECT_ID }}/water-futures-backend \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --set-env-vars "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }},ALPACA_API_KEY=${{ secrets.ALPACA_API_KEY }},ALPACA_SECRET_KEY=${{ secrets.ALPACA_SECRET_KEY }},CROSSMINT_API_KEY=${{ secrets.CROSSMINT_API_KEY }}" \
          --memory 2Gi \
          --cpu 2 \
          --max-instances 10 \
          --min-instances 1 \
          --port 8080
    
    # Deploy MCP HTTP Wrapper Service
    - name: Build and Push MCP HTTP Wrapper
      run: |
        docker build -t gcr.io/${{ env.PROJECT_ID }}/water-futures-mcp -f ./mcp-servers/Dockerfile ./mcp-servers
        docker push gcr.io/${{ env.PROJECT_ID }}/water-futures-mcp
    
    - name: Get Backend URL
      id: backend-url
      run: |
        BACKEND_URL=$(gcloud run services describe water-futures-backend --region ${{ env.REGION }} --format 'value(status.url)')
        echo "url=$BACKEND_URL" >> $GITHUB_OUTPUT
    
    - name: Deploy MCP HTTP Wrapper to Cloud Run
      run: |
        gcloud run deploy water-futures-mcp \
          --image gcr.io/${{ env.PROJECT_ID }}/water-futures-mcp \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --set-env-vars "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }},ALPACA_API_KEY=${{ secrets.ALPACA_API_KEY }},ALPACA_SECRET_KEY=${{ secrets.ALPACA_SECRET_KEY }},CROSSMINT_API_KEY=${{ secrets.CROSSMINT_API_KEY }},BACKEND_URL=${{ steps.backend-url.outputs.url }}" \
          --memory 1Gi \
          --cpu 1 \
          --max-instances 10 \
          --min-instances 1 \
          --port 8080
    
    # Deploy Chat Service
    - name: Build and Push Chat Service
      run: |
        docker build -t gcr.io/${{ env.PROJECT_ID }}/water-futures-chat -f ./mcp-servers/Dockerfile.chat ./mcp-servers
        docker push gcr.io/${{ env.PROJECT_ID }}/water-futures-chat
    
    - name: Deploy Chat Service to Cloud Run
      run: |
        gcloud run deploy water-futures-chat \
          --image gcr.io/${{ env.PROJECT_ID }}/water-futures-chat \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --set-env-vars "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }},ALPACA_API_KEY=${{ secrets.ALPACA_API_KEY }},ALPACA_SECRET_KEY=${{ secrets.ALPACA_SECRET_KEY }},CROSSMINT_API_KEY=${{ secrets.CROSSMINT_API_KEY }},BACKEND_URL=${{ steps.backend-url.outputs.url }}" \
          --memory 1Gi \
          --cpu 1 \
          --max-instances 10 \
          --min-instances 1 \
          --port 8080
    
    # Get Service URLs
    - name: Get Service URLs
      id: service-urls
      run: |
        MCP_URL=$(gcloud run services describe water-futures-mcp --region ${{ env.REGION }} --format 'value(status.url)')
        CHAT_URL=$(gcloud run services describe water-futures-chat --region ${{ env.REGION }} --format 'value(status.url)')
        echo "mcp_url=$MCP_URL" >> $GITHUB_OUTPUT
        echo "chat_url=$CHAT_URL" >> $GITHUB_OUTPUT
    
    # Update Frontend Configuration
    - name: Update Frontend Configuration
      run: |
        cat > frontend/.env.production << EOF
        # Production Environment Configuration - Auto-generated by GitHub Actions
        
        # Backend API URL (Cloud Run service)
        VITE_API_URL=${{ steps.backend-url.outputs.url }}
        
        # MCP Server URL (Cloud Run service)
        VITE_MCP_URL=${{ steps.service-urls.outputs.mcp_url }}
        
        # Chat Service URL (Cloud Run service)
        VITE_CHAT_URL=${{ steps.service-urls.outputs.chat_url }}
        
        # Use Chat Service for chat endpoints
        VITE_CHAT_ENDPOINT=${{ steps.service-urls.outputs.chat_url }}/api/v1/chat
        VITE_AGENT_ENDPOINT=${{ steps.service-urls.outputs.chat_url }}/api/v1/agent/execute
        
        # Firebase Configuration
        VITE_FIREBASE_API_KEY=AIzaSyAzAisQlEUKeIHTrpGy64eSm-ZRgduMMLQ
        VITE_FIREBASE_AUTH_DOMAIN=water-futures-ai.firebaseapp.com
        VITE_FIREBASE_PROJECT_ID=water-futures-ai
        VITE_FIREBASE_STORAGE_BUCKET=water-futures-ai.firebasestorage.app
        VITE_FIREBASE_MESSAGING_SENDER_ID=640022295144
        VITE_FIREBASE_APP_ID=1:640022295144:web:3b7bb0826efb6ace0981dd
        VITE_FIREBASE_MEASUREMENT_ID=G-1PKETWJCV2
        EOF
    
    # Build and Deploy Frontend
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install Frontend Dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Build Frontend
      run: |
        cd frontend
        npm run build
    
    - name: Deploy to Firebase Hosting
      run: |
        cd frontend
        npm install -g firebase-tools
        firebase deploy --only hosting --token "${{ secrets.FIREBASE_TOKEN }}" --project ${{ env.PROJECT_ID }}
    
    # Output Service URLs
    - name: Output Deployment Info
      run: |
        echo "ðŸš€ Deployment Complete!"
        echo "=================================="
        echo "Backend URL: ${{ steps.backend-url.outputs.url }}"
        echo "MCP Server URL: ${{ steps.service-urls.outputs.mcp_url }}"
        echo "Chat Service URL: ${{ steps.service-urls.outputs.chat_url }}"
        echo "Frontend URL: https://water-futures-ai.web.app"
        echo "=================================="