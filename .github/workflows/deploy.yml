name: Deploy to Cloud Run

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PROJECT_ID: water-futures-ai
  REGION: us-central1

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Allow pushing to repository
      id-token: write  # Allow OIDC token creation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        persist-credentials: true
    
    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
        create_credentials_file: true
        export_environment_variables: true
    
    - name: Setup Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Create Artifact Registry Repository
      run: |
        gcloud artifacts repositories create water-futures \
          --repository-format=docker \
          --location=${{ env.REGION }} \
          --description="Water Futures AI Docker images" || true
    
    - name: Configure Docker
      run: |
        gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
    
    # Deploy Backend Service
    - name: Build and Push Backend
      run: |
        docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/water-futures/backend:latest ./backend
        docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/water-futures/backend:latest
    
    - name: Deploy Backend to Cloud Run
      run: |
        # Create environment variables file to handle special characters
        cat > env_vars.yaml << EOF
        ANTHROPIC_API_KEY: "${{ secrets.ANTHROPIC_API_KEY }}"
        ALPACA_API_KEY: "${{ secrets.ALPACA_API_KEY }}"
        ALPACA_SECRET_KEY: "${{ secrets.ALPACA_SECRET_KEY }}"
        CROSSMINT_API_KEY: "${{ secrets.CROSSMINT_API_KEY }}"
        EOF
        
        gcloud run deploy water-futures-backend \
          --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/water-futures/backend:latest \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --env-vars-file env_vars.yaml \
          --memory 2Gi \
          --cpu 2 \
          --max-instances 10 \
          --min-instances 1 \
          --port 8080
        
        rm env_vars.yaml
    
    # Deploy MCP HTTP Wrapper Service
    - name: Build and Push MCP HTTP Wrapper
      run: |
        docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/water-futures/mcp:latest -f ./mcp-servers/Dockerfile ./mcp-servers
        docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/water-futures/mcp:latest
    
    - name: Get Backend URL
      id: backend-url
      run: |
        BACKEND_URL=$(gcloud run services describe water-futures-backend --region ${{ env.REGION }} --format 'value(status.url)')
        echo "url=$BACKEND_URL" >> $GITHUB_OUTPUT
    
    - name: Deploy MCP HTTP Wrapper to Cloud Run
      run: |
        # Create environment variables file to handle special characters
        cat > mcp_env_vars.yaml << EOF
        ANTHROPIC_API_KEY: "${{ secrets.ANTHROPIC_API_KEY }}"
        ALPACA_API_KEY: "${{ secrets.ALPACA_API_KEY }}"
        ALPACA_SECRET_KEY: "${{ secrets.ALPACA_SECRET_KEY }}"
        CROSSMINT_API_KEY: "${{ secrets.CROSSMINT_API_KEY }}"
        BACKEND_URL: "${{ steps.backend-url.outputs.url }}"
        EOF
        
        gcloud run deploy water-futures-mcp \
          --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/water-futures/mcp:latest \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --env-vars-file mcp_env_vars.yaml \
          --memory 1Gi \
          --cpu 1 \
          --max-instances 10 \
          --min-instances 1 \
          --port 8080
        
        rm mcp_env_vars.yaml
    
    # Deploy Chat Service
    - name: Build and Push Chat Service
      run: |
        docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/water-futures/chat:latest -f ./mcp-servers/Dockerfile.chat ./mcp-servers
        docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/water-futures/chat:latest
    
    - name: Deploy Chat Service to Cloud Run
      run: |
        # Create environment variables file to handle special characters
        cat > chat_env_vars.yaml << EOF
        ANTHROPIC_API_KEY: "${{ secrets.ANTHROPIC_API_KEY }}"
        ALPACA_API_KEY: "${{ secrets.ALPACA_API_KEY }}"
        ALPACA_SECRET_KEY: "${{ secrets.ALPACA_SECRET_KEY }}"
        CROSSMINT_API_KEY: "${{ secrets.CROSSMINT_API_KEY }}"
        BACKEND_URL: "${{ steps.backend-url.outputs.url }}"
        EOF
        
        gcloud run deploy water-futures-chat \
          --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/water-futures/chat:latest \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --env-vars-file chat_env_vars.yaml \
          --memory 1Gi \
          --cpu 1 \
          --max-instances 10 \
          --min-instances 1 \
          --port 8080
        
        rm chat_env_vars.yaml
    
    # Get Service URLs
    - name: Get Service URLs
      id: service-urls
      run: |
        # Wait for services to be ready
        sleep 30
        MCP_URL=$(gcloud run services describe water-futures-mcp --region ${{ env.REGION }} --format 'value(status.url)' || echo "")
        CHAT_URL=$(gcloud run services describe water-futures-chat --region ${{ env.REGION }} --format 'value(status.url)' || echo "")
        echo "mcp_url=$MCP_URL" >> $GITHUB_OUTPUT
        echo "chat_url=$CHAT_URL" >> $GITHUB_OUTPUT
        echo "MCP URL: $MCP_URL"
        echo "Chat URL: $CHAT_URL"
    
    # Update Frontend Configuration and Commit
    - name: Update Frontend Configuration
      run: |
        cat > frontend/.env.production << EOF
        # Production Environment Configuration - Auto-generated by GitHub Actions
        
        # Backend API URL (Cloud Run service)
        VITE_API_URL=${{ steps.backend-url.outputs.url }}
        
        # MCP Server URL (Using backend service since MCP routes are part of backend)
        VITE_MCP_URL=${{ steps.backend-url.outputs.url }}
        
        # Chat Service URL (Cloud Run service)
        VITE_CHAT_URL=${{ steps.service-urls.outputs.chat_url }}
        
        # Use Chat Service for chat endpoints
        VITE_CHAT_ENDPOINT=${{ steps.service-urls.outputs.chat_url }}/api/v1/chat
        VITE_AGENT_ENDPOINT=${{ steps.service-urls.outputs.chat_url }}/api/v1/agent/execute
        
        # Firebase Configuration
        VITE_FIREBASE_API_KEY=AIzaSyAzAisQlEUKeIHTrpGy64eSm-ZRgduMMLQ
        VITE_FIREBASE_AUTH_DOMAIN=water-futures-ai.firebaseapp.com
        VITE_FIREBASE_PROJECT_ID=water-futures-ai
        VITE_FIREBASE_STORAGE_BUCKET=water-futures-ai.firebasestorage.app
        VITE_FIREBASE_MESSAGING_SENDER_ID=640022295144
        VITE_FIREBASE_APP_ID=1:640022295144:web:3b7bb0826efb6ace0981dd
        VITE_FIREBASE_MEASUREMENT_ID=G-1PKETWJCV2
        EOF
        
        # Also create a .env file for runtime
        cp frontend/.env.production frontend/.env
    
    # Build and Deploy Frontend
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install Frontend Dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Build Frontend with Production Config
      run: |
        cd frontend
        # Ensure production environment is used
        NODE_ENV=production npm run build
        # Verify the dist directory was created
        echo "Checking build output..."
        ls -la dist/
        if [ ! -d "dist" ]; then
          echo "ERROR: dist directory not found after build!"
          exit 1
        fi
        echo "Build successful - dist directory contents:"
        ls -la dist/
    
    - name: Install Firebase Tools
      run: |
        npm install -g firebase-tools
    
    - name: Deploy to Firebase Hosting
      run: |
        # Use GCP service account authentication
        export GOOGLE_APPLICATION_CREDENTIALS="${{ steps.auth.outputs.credentials_file_path }}"
        # Verify we're in the right directory and files exist
        echo "Current directory: $(pwd)"
        echo "Checking for Firebase files..."
        ls -la firebase.json .firebaserc
        # Verify frontend dist directory exists
        echo "Checking frontend/dist directory..."
        if [ ! -d "frontend/dist" ]; then
          echo "ERROR: frontend/dist directory not found!"
          exit 1
        fi
        ls -la frontend/dist/
        # Deploy using the project flag to avoid needing firebase use
        firebase deploy --only hosting --project ${{ env.PROJECT_ID }} --non-interactive --debug
    
    # Commit Frontend Configuration Updates
    - name: Commit Frontend Updates
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git add frontend/.env.production frontend/.env 2>/dev/null || true
        if ! git diff --staged --quiet; then
          git commit -m "Update frontend production configuration [skip ci]" || echo "Commit failed"
          git push origin main || echo "Push failed - continuing deployment"
        else
          echo "No changes to commit"
        fi
    
    # Output Service URLs
    - name: Output Deployment Info
      run: |
        echo "ðŸš€ Deployment Complete!"
        echo "=================================="
        echo "Backend URL: ${{ steps.backend-url.outputs.url }}"
        echo "MCP Server URL: ${{ steps.service-urls.outputs.mcp_url }}"
        echo "Chat Service URL: ${{ steps.service-urls.outputs.chat_url }}"
        echo "Frontend URL: https://water-futures-ai.web.app"
        echo "=================================="